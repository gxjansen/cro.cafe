---
import '~/assets/styles/base.css';

import CustomStyles from '~/components/CustomStyles.astro';
import Favicons from '~/components/Favicons.astro';
import SkipLinks from '~/components/common/SkipLinks.astro';
import PodcastSEOEnhancer from '~/components/seo/PodcastSEOEnhancer.astro';

import type { Language, MetaData } from '~/types';
import type { CollectionEntry } from 'astro:content';
export interface Props {
  metadata?: MetaData & {
    image?: string;
    canonicalUrl?: string;
    type?: 'article' | 'website' | 'page';
    publishedTime?: string;
    modifiedTime?: string;
    author?: string;
    tags?: string[];
  };
  currentLang: Language;
  availableLanguages: readonly Language[];
  episode?: CollectionEntry<'en-episodes' | 'de-episodes' | 'es-episodes' | 'nl-episodes'>;
  seoType?: 'episode' | 'podcast' | 'homepage';
}
}

const { metadata, currentLang, availableLanguages, episode, seoType = 'podcast' } = Astro.props;

const {
  title = '',
  description = '',
  image = '/images/default.png',
  canonicalUrl = Astro.url.href,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  tags = [],
  alternateLanguages = {},
} = metadata || {};
---

<!DOCTYPE html>
<html lang="{currentLang}" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content="{Astro.generator}" />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content="{title}" />
    <meta name="description" content="{description}" />

    <!-- Favicons -->
    <Favicons />

    <!-- Canonical URL -->
    <link rel="canonical" href="{canonicalUrl}" />

    <!-- Language alternates -->
    {availableLanguages.map((lang: Language) => ( <link rel="alternate" hreflang={lang}
    href={alternateLanguages[lang] || `${Astro.url.origin}/${lang === 'en' ? '' : lang}`} /> ))}
    <link rel="alternate" hreflang="x-default" href="{Astro.url.origin}" />

    <!-- Open Graph -->
    <meta property="og:type" content="{type}" />
    <meta property="og:url" content="{canonicalUrl}" />
    <meta property="og:title" content="{title}" />
    <meta property="og:description" content="{description}" />
    <meta property="og:image" content="{new" URL(image, Astro.url)} />
    <meta property="og:locale" content="{currentLang}" />
    {availableLanguages .filter((lang: Language) => lang !== currentLang) .map((lang: Language) => (
    <meta property="og:locale:alternate" content="{lang}" />
    ))}

    <!-- Article specific -->
    {publishedTime &&
    <meta property="article:published_time" content="{publishedTime}" />
    } {modifiedTime &&
    <meta property="article:modified_time" content="{modifiedTime}" />
    } {author &&
    <meta property="article:author" content="{author}" />
    } {tags.map((tag: string) => (
    <meta property="article:tag" content="{tag}" />
    ))}

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="{canonicalUrl}" />
    <meta property="twitter:title" content="{title}" />
    <meta property="twitter:description" content="{description}" />
    <meta property="twitter:image" content="{new" URL(image, Astro.url)} />

    <!-- Podcast-specific SEO enhancements -->
    <PodcastSEOEnhancer episode="{episode}" type="{seoType}" currentLang="{currentLang}" />

    <!-- Custom Styles -->
    <CustomStyles />

    <!-- Theme Script -->
    <script is:inline>
      if (
        localStorage.theme === 'dark' ||
        (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }

      function attachEvent(selector, event, fn) {
        const matches =
          typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
        if (matches && matches.length) {
          matches.forEach((elem) => {
            elem.addEventListener(event, (e) => fn(e, elem), false);
          });
        }
      }

      window.onload = function () {
        attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
          if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark');
            localStorage.theme = 'light';
          } else {
            document.documentElement.classList.add('dark');
            localStorage.theme = 'dark';
          }
        });
      };
    </script>
  </head>

  <body>
    <SkipLinks />

    <div class="flex flex-col min-h-screen">
      <slot />
    </div>
  </body>
</html>
