---
export const prerender = true;
import { getCollection, type CollectionEntry } from 'astro:content';
import GuestLayout from '~/layouts/GuestLayout.astro';

type GuestCollectionType = 'en-guests' | 'nl-guests' | 'de-guests' | 'es-guests';

interface Props {
  guest: CollectionEntry<GuestCollectionType>;
  collection: GuestCollectionType;
}

export async function getStaticPaths() {
  const collections: GuestCollectionType[] = ['en-guests', 'nl-guests', 'de-guests', 'es-guests'];
  const allPaths = [];

  for (const collection of collections) {
    try {
      const guests = await getCollection(collection);
      const paths = guests.map((guest: CollectionEntry<GuestCollectionType>) => ({
        params: { slug: guest.id },
        props: { guest, collection },
      }));
      allPaths.push(...paths);
    } catch (error) {
      console.warn(`No guests found in collection: ${collection}`);
    }
  }

  return allPaths;
}

const { guest, collection } = Astro.props;
---
<GuestLayout guest={guest} collection={collection}>
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-4">{guest.data.name}</h1>
    <div class="prose dark:prose-invert">
      <p>{guest.data.bio}</p>
      {guest.data.social_links?.length > 0 && (
        <div class="mt-6">
          <h2 class="text-2xl font-semibold mb-2">Social Links</h2>
          <div class="flex gap-4">
            {guest.data.social_links.map((link: {name: string, url: string}) => (
              <a
                href={link.url}
                class="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-200"
                rel="noopener noreferrer"
              >
                {link.name}
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </main>
</GuestLayout>
