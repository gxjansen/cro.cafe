---
import { getCollection } from 'astro:content';
import PageLayout from '~/layouts/PageLayout.astro';
import { getGuestImage } from '~/utils/images';
import { SITE } from '~/config';
import ErrorBoundary from '~/components/common/ErrorBoundary.astro';
import EpisodeCard from '~/components/episode/Card.astro';

export async function getStaticPaths() {
  // Collect all guests from all languages
  const allGuests = [];
  for (const lang of SITE.languages) {
    const guests = await getCollection(`${lang}-guests`);
    allGuests.push(...guests);
  }

  // Create unique paths based on guest IDs
  const uniqueGuests = allGuests.reduce((acc, guest) => {
    if (!acc.find(g => g.data.id === guest.data.id)) {
      acc.push(guest);
    }
    return acc;
  }, []);

  return uniqueGuests.map((guest) => ({
    params: {
      slug: guest.data.id,
    },
    props: {
      guest: guest.data,
      metadata: {
        title: `${guest.data.name} - CRO.CAFE`,
        description: guest.data.bio || `Learn more about ${guest.data.name} and their episodes on CRO.CAFE`,
        type: 'profile',
        image: guest.data.image_url ? `/images/guests/${guest.data.image_url}` : '/images/default.png',
        author: SITE.name,
      },
    },
  }));
}

const { guest, metadata } = Astro.props;
const { name, role, bio, image_url, social_links } = guest;
console.log('Guest data:', { name, role, bio, image_url, social_links });

// Get guest image
const image = await getGuestImage(image_url ? `/images/guests/${image_url}` : '/images/default.png', 'detail');

// Get episodes featuring this guest from all languages
const allEpisodes = [];
for (const lang of SITE.languages) {
  const episodes = await getCollection(`${lang}-episodes`);
  const guestEpisodes = episodes.filter(episode => {
    const description = episode.data.attributes.description || '';
    // Check for both URL and name mentions to catch all references
    return (
      description.toLowerCase().includes(name.toLowerCase()) ||
      description.includes(`/guest/${guest.id}`) ||
      description.includes(guest.id)
    );
  });
  allEpisodes.push(...guestEpisodes);
}

// Sort episodes by date and transform data structure
const sortedEpisodes = allEpisodes
  .sort((a, b) => {
    return new Date(b.data.attributes.published_at).getTime() - new Date(a.data.attributes.published_at).getTime();
  })
  .map(episode => ({
    id: episode.id,
    type: 'episode',
    attributes: episode.data.attributes,
    relationships: {
      show: {
        data: {
          id: episode.data.relationships.show.data.id,
          type: 'show'
        }
      }
    }
  }));

console.log('Transformed episode data:', JSON.stringify(sortedEpisodes[0], null, 2));
---

<PageLayout metadata={metadata} currentLang="en" availableLanguages={['en']}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 space-y-16">
    <ErrorBoundary fallback="Sorry, we couldn't load this guest's information.">
      <article class="max-w-4xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
        <div class="p-6 sm:p-8">
          <div class="flex flex-col sm:flex-row gap-8">
            <div class="flex-shrink-0">
              <div class="relative w-48 h-48 sm:w-52 sm:h-52">
                <img
                  src={image.src}
                  width={200}
                  height={200}
                  alt={`${name}'s profile picture`}
                  class="rounded-full object-cover w-full h-full"
                  loading="eager"
                  decoding="async"
                  onload="this.classList.add('loaded')"
                  onerror="this.classList.add('error')"
                />
                <div class="absolute inset-0 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse image-loading-overlay"></div>
              </div>
            </div>
            <div class="flex-grow">
              <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{name}</h1>
              {role && (
                <p class="text-xl text-gray-600 dark:text-gray-400 mb-4">{role}</p>
              )}
              <div class="prose dark:prose-invert max-w-none mb-6">
                {bio ? (
                  <p>{bio}</p>
                ) : (
                  <p class="text-gray-600 dark:text-gray-400">
                    {name} has been a guest on CRO.CAFE, sharing insights and expertise in conversion rate optimization.
                  </p>
                )}
              </div>
              {social_links && social_links.length > 0 && (
                <div class="flex gap-4 mt-6 border-t dark:border-gray-700 pt-6">
                  {social_links.map(({ platform, url }) => (
                    <a
                      href={url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-gray-600 dark:text-gray-400 hover:text-accent dark:hover:text-accent transition-colors focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 dark:focus:ring-offset-gray-900 rounded"
                      title={`Follow ${name} on ${platform}`}
                      aria-label={`Follow ${name} on ${platform} (opens in new tab)`}
                    >
                      {platform === 'twitter' && (
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
                        </svg>
                      )}
                      {platform === 'linkedin' && (
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path>
                        </svg>
                      )}
                    </a>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </article>

      {sortedEpisodes.length > 0 && (
        <section class="max-w-7xl mx-auto">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Episodes featuring {name}</h2>
          <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3 mt-8">
            {sortedEpisodes.map((episode) => (
              <EpisodeCard episode={episode} />
            ))}
          </div>
        </section>
      )}
    </ErrorBoundary>
  </div>
</PageLayout>

<style>
.image-loading-overlay {
  opacity: 0.3;
  transition: opacity 0.3s ease-out;
}

img.loaded + .image-loading-overlay {
  opacity: 0;
  pointer-events: none;
}

img.error + .image-loading-overlay {
  @apply bg-red-200 dark:bg-red-900;
}

:global(.dark) .image-loading-overlay {
  opacity: 0.4;
}
</style>
