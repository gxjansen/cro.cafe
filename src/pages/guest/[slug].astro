---
export const prerender = true;
import { getCollection, type CollectionEntry } from 'astro:content';
import GuestLayout from '~/layouts/GuestLayout.astro';
import { getGuestImage } from '~/utils/images';
import { getEpisodesByGuest } from '~/utils/guests';
import { getTranslations } from '~/utils/translations';
import EpisodeCard from '~/components/episode/Card.astro';

type GuestCollectionType = 'en-guests' | 'nl-guests' | 'de-guests' | 'es-guests';

interface Props {
  guest: CollectionEntry<GuestCollectionType>;
  collection: GuestCollectionType;
}

export async function getStaticPaths() {
  const collections: GuestCollectionType[] = ['en-guests', 'nl-guests', 'de-guests', 'es-guests'];
  const allPaths = [];

  for (const collection of collections) {
    try {
      const guests = await getCollection(collection);
      const paths = guests.map((guest: CollectionEntry<GuestCollectionType>) => ({
        params: { slug: guest.id },
        props: { guest, collection },
      }));
      allPaths.push(...paths);
    } catch (error) {
      console.warn(`No guests found in collection: ${collection}`);
    }
  }

  return allPaths;
}

const { guest, collection } = Astro.props;
const language = collection.split('-')[0];
const t = getTranslations(language);

// Get guest image
const image = await getGuestImage(
  guest.data.image_url ? `/images/guests/${guest.data.image_url}` : '/images/default.png',
  'detail'
);

// Get episodes this guest appears in
// First try the current language
let guestEpisodes = await getEpisodesByGuest(language, guest.id);

// If no episodes found, try other languages
if (guestEpisodes.length === 0) {
  console.log(`No episodes found for ${guest.data.name} in ${language}, trying other languages`);
  
  // Try all languages
  const allLanguages = ['en', 'de', 'es', 'nl'];
  for (const lang of allLanguages) {
    if (lang !== language) {
      const episodes = await getEpisodesByGuest(lang, guest.id);
      if (episodes.length > 0) {
        console.log(`Found ${episodes.length} episodes in ${lang}`);
        guestEpisodes = episodes;
        break;
      }
    }
  }
}
---

<GuestLayout guest={guest} collection={collection} episodes={guestEpisodes}>
  <main class="container mx-auto px-4 py-12">
    <div class="max-w-4xl mx-auto">
      <!-- Guest Profile Header -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
        <div class="flex flex-col md:flex-row gap-8 items-center md:items-start">
          <!-- Guest Avatar -->
          <div class="flex-shrink-0">
            <img
              src={image.src}
              width={image.width}
              height={image.height}
              alt={`${guest.data.name}'s profile picture`}
              class="rounded-full object-cover w-40 h-40 md:w-48 md:h-48 border-4 border-accent shadow-lg"
              loading="eager"
            />
          </div>
          
          <!-- Guest Info -->
          <div class="flex-grow text-center md:text-left">
            <h1 class="text-3xl md:text-4xl font-bold mb-2 text-gray-900 dark:text-white">{guest.data.name}</h1>
            {guest.data.role && (
              <p class="text-xl text-gray-600 dark:text-gray-300 mb-4">{guest.data.role}</p>
            )}
            
            {guest.data.bio && (
              <div class="prose dark:prose-invert max-w-none mb-6">
                <p class="text-gray-700 dark:text-gray-300">{guest.data.bio}</p>
              </div>
            )}
            
            <!-- Social Links -->
            {guest.data.social_links?.length > 0 && (
              <div class="flex flex-wrap gap-4 justify-center md:justify-start">
                {guest.data.social_links.map((link: {platform: string, url: string}) => (
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                    aria-label={`Follow ${guest.data.name} on ${link.platform}`}
                  >
                    {link.platform === 'twitter' && (
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
                      </svg>
                    )}
                    {link.platform === 'linkedin' && (
                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path>
                      </svg>
                    )}
                    {link.platform === 'website' && (
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
                      </svg>
                    )}
                    <span>{link.platform.charAt(0).toUpperCase() + link.platform.slice(1)}</span>
                  </a>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Episodes Section -->
      {guestEpisodes.length > 0 && (
        <div class="mt-12">
          <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white border-b pb-2">
            {t.episodesWithGuest?.replace('{name}', guest.data.name) || `Episodes with ${guest.data.name}`}
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {guestEpisodes.map((episode) => (
              <EpisodeCard episode={episode} />
            ))}
          </div>
        </div>
      )}
    </div>
  </main>
</GuestLayout>
