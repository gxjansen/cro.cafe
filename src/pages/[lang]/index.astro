---
export const prerender = true;
import { getCollection, type CollectionEntry } from 'astro:content';
import PageLayout from '~/layouts/PageLayout.astro';
import Grid from '~/components/episode/Grid.astro';
import LatestEpisodes from '~/components/widgets/LatestEpisodes.astro';
import { SITE } from '~/config';

type Episode = CollectionEntry<`${(typeof SITE.languages)[number]}-episodes`>;

export async function getStaticPaths() {
  return SITE.languages.map((lang) => ({
    params: { lang },
  }));
}

const { lang } = Astro.params;
const currentLang = lang as (typeof SITE.languages)[number];

// Get episodes for this language
console.log(`Attempting to load episodes for ${currentLang}`);
let episodes = [];
let latestEpisodes = [];

try {
  const collectionName = `${currentLang}-episodes`;
  console.log(`[${currentLang}] Attempting to load collection:`, collectionName);
  episodes = await getCollection(collectionName);
  console.log(`[${currentLang}] Collection loaded successfully`);
  console.log(`[${currentLang}] Number of episodes:`, episodes.length);
  if (episodes.length > 0) {
    console.log(`[${currentLang}] First episode:`, JSON.stringify(episodes[0], null, 2));
  }

  // Sort episodes by date and get the latest ones
  latestEpisodes = episodes
    .sort((a: Episode, b: Episode) => {
      const dateA = new Date(b.data.attributes.published_at);
      const dateB = new Date(a.data.attributes.published_at);
      return dateA.valueOf() - dateB.valueOf();
    })
    .slice(0, 4)
    .map((episode: Episode) => {
      console.log(`[${currentLang}] Processing episode:`, JSON.stringify(episode, null, 2));
      return {
        id: episode.id,
        collection: `${currentLang}-episodes`,
        data: episode.data
      };
    });

  console.log(`[${currentLang}] Latest episodes:`, JSON.stringify(latestEpisodes, null, 2));
} catch (error) {
  console.error(`[${currentLang}] Error loading episodes:`, error);
  episodes = [];
  latestEpisodes = [];
}

// Language display names
const langNames = {
  en: 'English',
  nl: 'Nederlands',
  de: 'Deutsch',
  es: 'Español',
} as const;

// Prepare metadata
const metadata = {
  title: `CRO.CAFE - ${langNames[currentLang as keyof typeof langNames]} Podcast`,
  description: `Latest episodes of the ${langNames[currentLang as keyof typeof langNames]} CRO.CAFE podcast about Conversion Rate Optimization`,
  type: 'website',
  canonicalUrl: `${Astro.url.origin}/${currentLang}`,
  alternateLanguages: Object.fromEntries(
    SITE.languages.map((l: typeof currentLang) => [l, `${Astro.url.origin}/${l}`])
  ),
  image: latestEpisodes.length > 0
    ? `/images/episodes/${currentLang}/${latestEpisodes[0].data.attributes.slug.replace(/_/g, '-').toLowerCase()}.webp`
    : `/images/default.png`,
  publishedTime: new Date().toISOString(),
  modifiedTime: new Date().toISOString(),
  author: SITE.name,
  tags: ['podcast', 'cro', 'conversion rate optimization']
};
---

<PageLayout
  metadata={metadata}
  currentLang={currentLang}
  availableLanguages={SITE.languages}
>
  <main class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12 lg:py-16">
    <section class="max-w-7xl mx-auto">
      <header class="text-center mb-12">
        <h1 class="text-4xl sm:text-5xl font-bold mb-4 text-gray-900 dark:text-white">
          CRO.CAFE {langNames[currentLang as keyof typeof langNames]}
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-400">
          {currentLang === 'en' && 'The podcast about Conversion Rate Optimization'}
          {currentLang === 'nl' && 'De podcast over Conversion Rate Optimization'}
          {currentLang === 'de' && 'Der Podcast über Conversion Rate Optimization'}
          {currentLang === 'es' && 'El podcast sobre Conversion Rate Optimization'}
        </p>
      </header>

      <Grid 
        episodes={latestEpisodes}
        limit={4}
        columns="4"
      />

      <div class="mt-16">
        <LatestEpisodes />
      </div>

      <div class="text-center mt-12">
        <a
          href={`/${currentLang}/episodes`}
          class="btn btn-primary inline-flex items-center gap-2"
        >
          <span>
            {currentLang === 'en' && 'View All Episodes'}
            {currentLang === 'nl' && 'Bekijk Alle Afleveringen'}
            {currentLang === 'de' && 'Alle Folgen Ansehen'}
            {currentLang === 'es' && 'Ver Todos los Episodios'}
          </span>
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M5 12l14 0"></path>
            <path d="M13 18l6 -6"></path>
            <path d="M13 6l6 6"></path>
          </svg>
        </a>
      </div>
    </section>
  </main>
</PageLayout>
