---
import { getCollection, type CollectionEntry } from 'astro:content';
import PageLayout from '~/layouts/PageLayout.astro';
import SingleEpisode from '~/components/episode/SingleEpisode.astro';
import { SITE } from '~/config';

interface Props {
  metadata: {
    title: string;
    description: string;
    image?: string;
    canonicalUrl?: string;
    type?: 'website' | 'article';
    publishedTime?: string;
    modifiedTime?: string;
    author?: string;
    tags?: string[];
    alternateLanguages?: Record<string, string>;
  };
  currentLang: 'en' | 'nl' | 'de' | 'es';
  availableLanguages: readonly ('en' | 'nl' | 'de' | 'es')[];
  episode: {
    id: string;
    type: 'episode';
    attributes: {
      title: string;
      description: string;
      summary: string | null;
      published_at: string;
      media_url: string;
      duration: number;
      duration_in_mmss: string;
      formatted_published_at: string;
      formatted_description: string;
      image_url?: string | null;
      video_url?: string | null;
      embed_html: string;
      embed_html_dark: string;
      slug: string;
    };
    relationships: {
      show: {
        data: {
          id: string;
          type: string;
        };
      };
    };
  };
}

type Language = typeof SITE.languages[number];
type EpisodeCollection = `${Language}-episodes`;

// Get all episodes for each language and generate paths
export async function getStaticPaths() {
  const paths = [];

  for (const lang of SITE.languages) {
    const episodes = await getCollection(`${lang}-episodes`);
    
    const langPaths = episodes.map((episode: CollectionEntry<EpisodeCollection>) => ({
      params: {
        lang,
        slug: episode.data.attributes.slug,
      },
      props: {
        episode: episode.data,
        metadata: {
          title: episode.data.attributes.title,
          description: episode.data.attributes.formatted_description || episode.data.attributes.description || 'Listen to this episode of CRO.CAFE',
          type: 'article',
          publishedTime: episode.data.attributes.published_at,
          image: episode.data.attributes.local_image_url || episode.data.attributes.image_url || '/images/default.png',
          author: SITE.name,
          tags: [],
          alternateLanguages: {},
        },
        currentLang: lang,
        availableLanguages: ['en', 'nl', 'de', 'es'],
      },
    }));
    
    paths.push(...langPaths);
  }

  return paths;
}

// Get the episode data from props
const { episode } = Astro.props;
const { lang } = Astro.params;
const currentLang = lang as Language;
const availableLanguages = ['en', 'nl', 'de', 'es'] as const;

// Build alternate language URLs
const alternateLanguages: Record<string, string> = {};
for (const lang of availableLanguages) {
  // Only add alternate if episode exists in that language
  const collection = await getCollection(`${lang}-episodes`);
  const exists = collection.some((ep: CollectionEntry<EpisodeCollection>) => ep.data.attributes.slug === episode.attributes.slug);
  if (exists) {
    alternateLanguages[lang] = `${Astro.url.origin}/${lang}/episodes/${episode.attributes.slug}`;
  }
}

// Prepare metadata with all required fields
const metadata = {
  title: episode.attributes.title,
  description: episode.attributes.formatted_description || episode.attributes.description || 'Listen to this episode of CRO.CAFE',
  type: 'article',
  publishedTime: episode.attributes.published_at,
  modifiedTime: undefined,
  image: episode.attributes.local_image_url || episode.attributes.image_url || '/images/default.png',
  canonicalUrl: currentLang === 'en' ? Astro.url.href : alternateLanguages['en'] || Astro.url.href,
  author: SITE.name,
  tags: [],
  alternateLanguages
};
---

{/* prettier-ignore */}
<PageLayout metadata={metadata} currentLang={currentLang} availableLanguages={availableLanguages}>
  <SingleEpisode episode={episode} availableLanguages={availableLanguages} />
</PageLayout>
