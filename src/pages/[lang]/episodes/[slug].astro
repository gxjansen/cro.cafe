---
import { getCollection } from 'astro:content';
import Layout, { type Props } from '../../../layouts/Layout.astro';
import { SITE } from '~/config';

interface PageProps {
  episode: {
    id: string;
    type: 'episode';
    attributes: {
      title: string;
      description: string;
      summary: string | null;
      published_at: string;
      media_url: string;
      duration: number;
      duration_in_mmss: string;
      formatted_published_at: string;
      formatted_description: string;
      image_url?: string | null;
      video_url?: string | null;
      embed_html: string;
      embed_html_dark: string;
      slug: string;
    };
    relationships: {
      show: {
        data: {
          id: string;
          type: string;
        };
      };
    };
  };
}

// Import supported languages from config
import { SITE } from '~/config';
type Language = typeof SITE.languages[number];

// Get all episodes for each language and generate paths
export async function getStaticPaths() {
  const paths = [];

  for (const lang of SITE.languages) {
    const episodes = await getCollection(`${lang}-episodes`);
    
    const langPaths = episodes.map((episode) => ({
      params: {
        lang,
        slug: episode.data.attributes.slug,
      },
      props: {
        episode: episode.data,
      },
    }));
    
    paths.push(...langPaths);
  }

  return paths;
}

// Get the episode data from props
const { episode } = Astro.props;
const { lang } = Astro.params;
const currentLang = lang as Language;
const availableLanguages = SITE.languages;

// Build alternate language URLs
const alternateLanguages: Record<string, string> = {};
for (const lang of SITE.languages) {
  // Only add alternate if episode exists in that language
  const collection = await getCollection(`${lang}-episodes`);
  const exists = collection.some(ep => ep.data.attributes.slug === episode.attributes.slug);
  if (exists) {
    alternateLanguages[lang] = `${Astro.url.origin}/${lang}/episodes/${episode.attributes.slug}`;
  }
}

// Prepare metadata with all optional properties explicitly defined
const metadata: Props['metadata'] = {
  title: episode.attributes.title,
  description: episode.attributes.summary || episode.attributes.description.slice(0, 160),
  type: 'article',
  publishedTime: episode.attributes.published_at,
  modifiedTime: undefined,
  image: episode.attributes.image_url || undefined,
  // Make English version canonical for cross-language episodes
  canonicalUrl: currentLang === 'en' ? Astro.url.href : alternateLanguages['en'] || Astro.url.href,
  author: SITE.name,
  tags: undefined,
  alternateLanguages
};
---

<Layout
  metadata={metadata}
  currentLang={currentLang}
  availableLanguages={availableLanguages}
>
  <main class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12 lg:py-16">
    <article class="max-w-4xl mx-auto">
      {/* Episode header */}
      <header class="mb-8 sm:mb-12">
        <div class="flex gap-2 mb-4">
          <span class={`badge badge-${currentLang}`}>
            {currentLang === 'en' ? 'English' :
             currentLang === 'nl' ? 'Nederlands' :
             currentLang === 'de' ? 'Deutsch' :
             currentLang === 'es' ? 'Espa√±ol' : currentLang}
          </span>
        </div>
        <h1 class="text-3xl sm:text-4xl font-bold mb-4 text-gray-900 dark:text-white">
          {episode.attributes.title}
        </h1>
        <div class="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
          <time datetime={episode.attributes.published_at}>
            {episode.attributes.formatted_published_at}
          </time>
          <span class="flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path>
              <path d="M12 7l0 5l3 3"></path>
            </svg>
            {episode.attributes.duration_in_mmss}
          </span>
        </div>
      </header>

      {/* Episode image */}
      {episode.attributes.image_url && (
        <div class="mb-8 sm:mb-12 rounded-lg overflow-hidden">
          <img
            src={episode.attributes.image_url}
            alt=""
            class="w-full aspect-video object-cover"
            width={1200}
            height={675}
          />
        </div>
      )}

      {/* Episode player */}
      <div class="mb-8 sm:mb-12">
        <Fragment set:html={episode.attributes.embed_html} />
      </div>

      {/* Episode description */}
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Fragment set:html={episode.attributes.formatted_description} />
      </div>

      {/* Video embed if available */}
      {episode.attributes.video_url && (
        <div class="mt-8 sm:mt-12">
          <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
            Watch the Episode
          </h2>
          <div class="aspect-video">
            <iframe
              src={episode.attributes.video_url}
              class="w-full h-full rounded-lg"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
            ></iframe>
          </div>
        </div>
      )}
    </article>
  </main>
</Layout>
