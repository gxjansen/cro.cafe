---
import { Icon } from 'astro-icon/components';

export interface Props {
  currentLang: 'en' | 'de' | 'es' | 'nl';
  placeholder?: string;
}

const { currentLang, placeholder } = Astro.props;

// Multi-language search placeholders
const searchPlaceholders = {
  en: 'Search episodes, guests, topics...',
  de: 'Episoden, Gäste, Themen suchen...',
  es: 'Buscar episodios, invitados, temas...',
  nl: 'Zoek afleveringen, gasten, onderwerpen...'
};

const searchLabels = {
  en: 'Search',
  de: 'Suchen',
  es: 'Buscar',
  nl: 'Zoeken'
};

const currentPlaceholder = placeholder || searchPlaceholders[currentLang];
const searchLabel = searchLabels[currentLang];
---

<div class="search-container relative w-full max-w-2xl mx-auto">
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Icon name="tabler:search" class="h-5 w-5 text-gray-400" />
    </div>
    <input
      type="search"
      id="pagefind-search"
      class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary focus:border-primary sm:text-sm transition-colors duration-200"
      placeholder="{currentPlaceholder}"
      aria-label="{searchLabel}"
      autocomplete="off"
    />
  </div>

  <!-- Search Results Container -->
  <div
    id="pagefind-results"
    class="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto hidden"
  >
    <!-- Results will be populated by PageFind -->
  </div>

  <!-- Loading indicator -->
  <div id="search-loading" class="hidden text-center py-4">
    <div class="inline-flex items-center">
      <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2"></div>
      <span class="text-sm text-gray-600">
        {currentLang === 'en' ? 'Searching...' : currentLang === 'de' ? 'Suche läuft...' :
        currentLang === 'es' ? 'Buscando...' : 'Zoeken...'}
      </span>
    </div>
  </div>

  <!-- Development message -->
  <div id="dev-message" class="hidden text-center py-4">
    <p class="text-sm text-gray-500">
      {currentLang === 'en' ? 'Search will be available after build' : currentLang === 'de' ? 'Suche
      wird nach dem Build verfügbar sein' : currentLang === 'es' ? 'La búsqueda estará disponible
      después del build' : 'Zoeken wordt beschikbaar na de build'}
    </p>
  </div>
</div>

<script>
  // Initialize search functionality
  document.addEventListener('DOMContentLoaded', async () => {
    const searchInput = document.getElementById('pagefind-search');
    const resultsContainer = document.getElementById('pagefind-results');
    const loadingIndicator = document.getElementById('search-loading');
    const devMessage = document.getElementById('dev-message');

    if (!searchInput || !resultsContainer) return;

    try {
      // Check if we're in production (PageFind available)
      const isProduction =
        window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1';

      if (!isProduction) {
        console.log('Development mode - search will be available after build');
        showDevelopmentMessage();
        return;
      }

      // Try to load PageFind (production only)
      const script = document.createElement('script');
      script.src = '/pagefind/pagefind.js';
      script.onload = () => initializeSearch(searchInput, resultsContainer, loadingIndicator);
      script.onerror = () => {
        console.log('PageFind not available');
        showDevelopmentMessage();
      };
      document.head.appendChild(script);
    } catch (error) {
      console.log('Search initialization failed:', error);
      showDevelopmentMessage();
    }

    function showDevelopmentMessage() {
      if (searchInput) {
        searchInput.placeholder = 'Search available after build...';
        searchInput.disabled = true;
        searchInput.style.opacity = '0.6';
      }
      if (devMessage) {
        devMessage.classList.remove('hidden');
      }
    }

    function initializeSearch(input, results, loading) {
      // This will be called when PageFind is loaded in production
      console.log('Search initialized');

      let searchTimeout;

      input.addEventListener('input', (e) => {
        const query = e.target.value.trim();

        clearTimeout(searchTimeout);

        if (query.length < 2) {
          results.classList.add('hidden');
          return;
        }

        searchTimeout = setTimeout(async () => {
          loading.classList.remove('hidden');
          results.classList.add('hidden');

          try {
            // Perform search when PageFind is available
            // This is a placeholder for actual PageFind integration
            console.log('Searching for:', query);

            // Simulate search delay
            await new Promise((resolve) => setTimeout(resolve, 300));

            loading.classList.add('hidden');
            results.innerHTML =
              '<div class="p-4 text-gray-500">Search functionality will be implemented with PageFind</div>';
            results.classList.remove('hidden');
          } catch (error) {
            console.error('Search error:', error);
            loading.classList.add('hidden');
          }
        }, 300);
      });

      // Hide results when clicking outside
      document.addEventListener('click', (e) => {
        if (!input.contains(e.target) && !results.contains(e.target)) {
          results.classList.add('hidden');
        }
      });
    }
  });
</script>

<style>
  .search-container input:disabled {
    cursor: not-allowed;
  }
</style>
