---
import { getCollection } from 'astro:content';
import Card from '../episode/Card.astro';

console.log('Starting LatestEpisodes component...');

let latestEpisodes: { lang: string; episode: any }[] = [];

try {
  // Get episodes from each language collection
  const enEpisodes = await getCollection('en-episodes');
  console.log('EN Episodes loaded:', enEpisodes.length);

  const nlEpisodes = await getCollection('nl-episodes');
  console.log('NL Episodes loaded:', nlEpisodes.length);

  const deEpisodes = await getCollection('de-episodes');
  console.log('DE Episodes loaded:', deEpisodes.length);

  const esEpisodes = await getCollection('es-episodes');
  console.log('ES Episodes loaded:', esEpisodes.length);

  // Sort episodes by date and get the latest one from each language
  const getLatestEpisode = (episodes: any[], lang: string) => {
    if (!episodes || episodes.length === 0) {
      console.log(`No episodes found for ${lang}`);
      return null;
    }

    const sorted = episodes.sort((a, b) => {
      const dateA = new Date(b.data.attributes.published_at);
      const dateB = new Date(a.data.attributes.published_at);
      return dateA.valueOf() - dateB.valueOf();
    });

    const latestEpisode = sorted[0];
    console.log(`Latest ${lang} episode:`, {
      id: latestEpisode.id,
      title: latestEpisode.data.attributes.title,
      date: latestEpisode.data.attributes.published_at,
      clean_description: latestEpisode.data.attributes.clean_description
    });

    // Transform data structure to match Card.astro expectations
    return {
      id: latestEpisode.id,
      collection: `${lang}-episodes`,
      data: {
        id: latestEpisode.id,
        type: 'episode',
        attributes: latestEpisode.data.attributes,
        relationships: {
          show: {
            data: {
              id: latestEpisode.data.relationships.show.data.id,
              type: 'show'
            }
          }
        }
      }
    };
  };

  latestEpisodes = [
    { lang: 'en', episode: getLatestEpisode(enEpisodes, 'en') },
    { lang: 'nl', episode: getLatestEpisode(nlEpisodes, 'nl') },
    { lang: 'de', episode: getLatestEpisode(deEpisodes, 'de') },
    { lang: 'es', episode: getLatestEpisode(esEpisodes, 'es') },
  ].filter(({ episode }) => episode);

  console.log('Final episodes count:', latestEpisodes.length);
} catch (error) {
  console.error('Error in LatestEpisodes component:', error);
}
---

<div class="bg-white dark:bg-gray-900 mt-16 md:mt-24">
  <section class="latest-episodes py-16 relative z-20 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <h2 class="text-3xl font-bold mb-12 text-center text-gray-900 dark:text-white">
      Latest CRO.CAFE Episodes from All Shows
    </h2>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
      {latestEpisodes.length > 0 ? (
        latestEpisodes.map(({ episode }) => (
          <Card episode={episode} />
        ))
      ) : (
        <div class="col-span-full text-center text-gray-500 dark:text-gray-400">
          No episodes found
        </div>
      )}
    </div>
  </section>
</div>

<style>
  .episode-card {
    @apply hover:shadow-xl;
  }
</style>
