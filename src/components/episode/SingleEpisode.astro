---
import DOMPurify from 'isomorphic-dompurify';
import Player from './Player.astro';
import StructuredData from '../common/StructuredData.astro';
import ErrorBoundary from '../common/ErrorBoundary.astro';
import { validateProps, SingleEpisodePropsSchema } from '~/utils/component-validation';
import { getEpisodeCanonicalUrl, getLanguageFromShowId } from '~/utils/permalinks';
import { getEpisodeImage } from '~/utils/images';

interface Props {
  episode: {
    id: string;
    type: 'episode';
    attributes: {
      title: string;
      summary: string;
      description: string;
      published_at: string;
      media_url: string;
      duration: number;
      duration_in_mmss: string;
      formatted_published_at: string;
      formatted_description: string;
      image_url?: string;
      local_image_url?: string;
      video_url?: string;
      transcript_url?: string;
      share_url: string;
      embed_html: string;
      embed_html_dark: string;
      slug: string;
    };
    relationships: {
      show: {
        data: {
          id: string;
          type: string;
        };
      };
    };
  };
  availableLanguages: readonly ('en' | 'de' | 'es' | 'nl')[];
  loading?: boolean;
}

// Validate props
const props = validateProps(SingleEpisodePropsSchema, Astro.props);
const { episode, availableLanguages, loading = false } = props;
const { 
  title,
  summary,
  description,
  published_at,
  media_url,
  duration,
  duration_in_mmss,
  formatted_published_at,
  formatted_description,
  image_url,
  video_url,
  transcript_url,
  share_url,
  embed_html,
  slug,
} = episode.attributes;

// Get language from show ID
const language = getLanguageFromShowId(episode.relationships.show.data.id);

const image = await getEpisodeImage(`/images/episodes/${language}/${episode.attributes.slug}.webp`, 'detail');

// Ensure local image URL is used for Open Graph and Twitter meta tags
const ogImageUrl = episode.local_image_url || image.src;

// Sanitize HTML content
const sanitizedDescription = DOMPurify.sanitize(formatted_description);

// Prepare structured data
const structuredData = {
  '@type': 'PodcastEpisode',
  name: title,
  description: summary,
  datePublished: published_at,
  duration: `PT${Math.floor(duration / 60)}M${duration % 60}S`,
  image: {
    '@type': 'ImageObject',
    url: image.src,
    width: image.width,
    height: image.height,
  },
  associatedMedia: {
    '@type': 'MediaObject',
    contentUrl: media_url,
  },
  ...(video_url && {
    video: {
      '@type': 'VideoObject',
      url: video_url,
    },
  }),
  ...(transcript_url && {
    transcript: {
      '@type': 'Text',
      url: transcript_url,
    },
  }),
};
---

<ErrorBoundary fallback="Sorry, we couldn't load this episode. Please try again later.">
  <article class:list={['single-episode', { 'is-loading': loading }]}>
    {loading ? (
      <div class="loading-skeleton">
        <div class="skeleton-header">
          <div class="skeleton-title"></div>
          <div class="skeleton-meta"></div>
        </div>
        <div class="skeleton-image"></div>
        <div class="skeleton-player"></div>
        <div class="skeleton-content">
          <div class="skeleton-text"></div>
          <div class="skeleton-text"></div>
          <div class="skeleton-text"></div>
        </div>
      </div>
    ) : (
      <>
        <header class="episode-header">
          <div class="header-content">
            <h1>{title}</h1>
            <div class="episode-meta flex flex-col gap-3">
              <div class="text-sm text-gray-600 dark:text-gray-400">
                Publication date: <time datetime={published_at} class="font-medium">
                  {new Date(published_at).getDate()} {new Date(published_at).toLocaleString('en-GB', { month: 'long' })}, {new Date(published_at).getFullYear()}
                </time>
              </div>
              <div class="text-sm text-gray-600 dark:text-gray-400">
                Duration: <span class="font-medium">{duration_in_mmss}</span>
              </div>
              {transcript_url && (
                <a href={transcript_url} class="transcript-link">
                  View Transcript
                </a>
              )}
              {video_url && (
                <a href={video_url} class="youtube-link">
                  Watch on YouTube
                </a>
              )}
            </div>
          </div>
          <div class="relative aspect-[16/9]">
<img
  src={episode.local_image_url || image.src}
  width={image.width}
  height={image.height}
  alt={title}
  loading="eager"
  decoding="async"
  class="absolute inset-0 w-full h-full object-cover rounded-lg shadow-lg"
/>
          </div>
        </header>

        <div class="mt-6">
          <ErrorBoundary fallback="Audio player unavailable. Please try again later.">
            <Player 
              audio_url={media_url}
              title={title}
            />
          </ErrorBoundary>
        </div>

        <div class="episode-content mt-6">
          <div class="description" set:html={sanitizedDescription} />
        </div>

        <ErrorBoundary fallback="Additional episode information unavailable.">
          <StructuredData
            type="PodcastEpisode"
            data={structuredData}
            canonicalUrl={getEpisodeCanonicalUrl(language, slug)}
            availableLanguages={availableLanguages}
          />
        </ErrorBoundary>
      </>
    )}
  </article>
</ErrorBoundary>

<style>
.single-episode {
  @apply max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8 lg:py-12;
}

.episode-header {
  @apply mb-6 sm:mb-8;
}

.header-content {
  @apply mb-4 sm:mb-6;
}

.header-content h1 {
  @apply text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mb-2 sm:mb-4
         leading-tight sm:leading-snug lg:leading-normal;
}

.episode-meta {
  @apply flex flex-wrap gap-3 sm:gap-4 text-sm text-gray-600 dark:text-gray-400;
}

.duration {
  @apply flex items-center;
}

.transcript-link,
.youtube-link {
  @apply flex items-center text-blue-600 dark:text-blue-400 hover:underline
         transition-colors duration-200;
}


.episode-content {
  @apply mt-6 sm:mt-8;
}

.description {
  @apply prose dark:prose-invert max-w-none mb-6 sm:mb-8
         text-base sm:text-lg leading-relaxed;
}

.share-section {
  @apply mt-8 sm:mt-12;
}

.share-section h2 {
  @apply text-xl sm:text-2xl font-bold mb-4 sm:mb-6 text-gray-900 dark:text-white;
}

.share-embed {
  @apply mb-4;

  :global(iframe) {
    @apply w-full rounded-lg shadow-md;
  }
}

.share-link {
  @apply inline-block px-4 py-2 bg-blue-600 text-white rounded-lg
         hover:bg-blue-700 transition-colors duration-200;
}

/* Loading skeleton styles */
.loading-skeleton {
  @apply animate-pulse space-y-6 sm:space-y-8;
}

.skeleton-header {
  @apply space-y-4;
}

.skeleton-title {
  @apply h-8 sm:h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-3/4;
}

.skeleton-meta {
  @apply h-4 sm:h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/3;
}

.skeleton-image {
  @apply w-full aspect-video bg-gray-200 dark:bg-gray-700 rounded-lg;
}

.skeleton-player {
  @apply h-24 sm:h-32 bg-gray-200 dark:bg-gray-700 rounded-lg mt-6;
}

.skeleton-content {
  @apply space-y-4;
}

.skeleton-text {
  @apply h-4 bg-gray-200 dark:bg-gray-700 rounded;
}

.skeleton-text:last-child {
  @apply w-2/3;
}

/* Focus styles */
a:focus {
  @apply outline-none ring-2 ring-blue-500 ring-offset-2 dark:ring-offset-gray-800;
}

/* Dark mode adjustments */
:global(.dark) .single-episode {
  @apply bg-gray-900;
}
</style>
