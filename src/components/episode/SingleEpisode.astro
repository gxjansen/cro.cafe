---
import Player from './Player.astro';
import StructuredData from '../common/StructuredData.astro';
import ErrorBoundary from '../common/ErrorBoundary.astro';
import GuestCard from '../guest/GuestCard.astro';
import HostCard from '../host/HostCard.astro';
import { validateProps, SingleEpisodePropsSchema } from '~/utils/component-validation';
import { getEpisodeCanonicalUrl, getLanguageFromShowId } from '~/utils/permalinks';
import { getEpisodeImage } from '~/utils/images';
import { getCollection } from 'astro:content';
import { getTranslations } from '~/utils/translations';

interface Props {
  episode: {
    id: string;
    collection: string;
    data: {
      id: string;
      type: 'episode';
      attributes: {
        title: string;
        summary: string | null;
        description: string;
        published_at: string;
        media_url: string;
        duration: number;
        duration_in_mmss: string;
        formatted_published_at: string;
        formatted_description?: string | null;
        clean_description?: string | null;
        image_url?: string | null;
        local_image_url?: string;
        video_url?: string | null;
        transcript_url?: string | null;
        share_url: string;
        embed_html: string;
        embed_html_dark: string;
        slug: string;
      };
      relationships: {
        show: {
          data: {
            id: string;
            type: string;
          };
        };
      };
    };
  };
  availableLanguages: readonly ('en' | 'de' | 'es' | 'nl')[];
  loading?: boolean;
}

// Validate props
const props = validateProps(SingleEpisodePropsSchema, Astro.props);
const { episode, availableLanguages, loading = false } = props;

// Get language and guests
const language = getLanguageFromShowId(episode.data.relationships.show.data.id);
const guests: {
  id: string;
  attributes: {
    name: string;
  };
}[] = [];

// Get translations for the current language
const t = getTranslations(language);

// Define host type
type Host = {
  data: {
    id: string;
    name: string;
    role: string;
    bio: string;
    image_url: string;
    social_links: Array<{
      platform: string;
      url: string;
    }>;
    languages: string[];
    type: 'host';
  };
};

// Get hosts for this language
const allHosts = await getCollection('hosts');
const hosts = allHosts.filter((host: Host) => host.data.languages.includes(language));

const {
  title,
  summary,
  published_at,
  media_url,
  duration,
  duration_in_mmss,
  clean_description,
  video_url,
  transcript_url,
  slug,
} = episode.data.attributes;

const image = await getEpisodeImage(`/images/episodes/${language}/${episode.data.attributes.slug}.webp`, 'detail');

// Prepare structured data
const structuredData = {
  '@type': 'PodcastEpisode',
  name: title,
  description: summary,
  datePublished: published_at,
  duration: `PT${Math.floor(duration / 60)}M${duration % 60}S`,
  image: {
    '@type': 'ImageObject',
    url: image.src,
    width: image.width,
    height: image.height,
  } as const,
  associatedMedia: {
    '@type': 'MediaObject',
    contentUrl: media_url,
  },
  ...(video_url && {
    video: {
      '@type': 'VideoObject',
      url: video_url,
    },
  }),
  ...(transcript_url && {
    transcript: {
      '@type': 'Text',
      url: transcript_url,
    },
  }),
};
---

<ErrorBoundary fallback="Sorry, we couldn't load this episode. Please try again later.">
  <article class:list={['single-episode', { 'is-loading': loading }]}>
    {loading ? (
      <div class="loading-skeleton">
        <div class="skeleton-header">
          <div class="skeleton-title"></div>
          <div class="skeleton-meta"></div>
        </div>
        <div class="skeleton-image"></div>
        <div class="skeleton-player"></div>
        <div class="skeleton-content">
          <div class="skeleton-text"></div>
          <div class="skeleton-text"></div>
          <div class="skeleton-text"></div>
        </div>
      </div>
    ) : (
      <>
        <header class="episode-header">
          <div class="header-content">
            <h1>{title}</h1>
            <div class="episode-meta flex flex-col gap-3">
              <div class="text-sm text-gray-600 dark:text-gray-400">
                Publication date: <time datetime={published_at} class="font-medium">
                  {new Date(published_at).getDate()} {new Date(published_at).toLocaleString('en-GB', { month: 'long' })}, {new Date(published_at).getFullYear()}
                </time>
              </div>
              <div class="text-sm text-gray-600 dark:text-gray-400">
                Duration: <span class="font-medium">{duration_in_mmss}</span>
              </div>
            </div>
          </div>
          <div class="relative aspect-[16/9]">
            {video_url?.trim() ? (
              <iframe
                src={video_url.replace(/(youtube\.com\/watch\?v=|youtu\.be\/)([^&]+)/, 'youtube.com/embed/$2')}
                title={`Video: ${title}`}
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen
                loading="lazy"
                class="absolute inset-0 w-full h-full rounded-lg shadow-lg"
              />
            ) : (
              <img
                src={episode.data.attributes.local_image_url || image.src}
                width={image.width}
                height={image.height}
                alt={title}
                loading="eager"
                decoding="async"
                class="absolute inset-0 w-full h-full object-cover rounded-lg shadow-lg"
              />
            )}
          </div>
        </header>

        <div class="mt-6">
          <ErrorBoundary fallback="Audio player unavailable. Please try again later.">
            <Player 
              audio_url={media_url}
              title={title}
            />
          </ErrorBoundary>
        </div>

        <div class="episode-content mt-6">
          {summary?.trim() && (
            <div class="episode-summary mb-6">
              <p class="text-lg text-gray-700 dark:text-gray-300">{summary}</p>
            </div>
          )}
          {clean_description?.trim() && clean_description !== summary?.trim() && (
            <div class="episode-description">
              <div class="description">{clean_description}</div>
            </div>
          )}

          {guests?.length > 0 && (
            <div class="episode-guests mt-8">
              <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">{t.episodeGuests}</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                {guests.map((guest: { id: string; attributes: { name: string } }) => (
                  <GuestCard guest={{
                    id: guest.id,
                    name: guest.attributes.name,
                    role: '',
                    bio: '',
                    image_url: '',
                    social_links: [],
                    language: language,
                    type: 'guest'
                  }} />
                ))}
              </div>
            </div>
          )}

          {hosts?.length > 0 && (
            <div class="episode-hosts mt-8">
              <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">
                {hosts.length > 1 ? t.yourHosts : t.yourHost}
              </h2>
              <div class={`grid grid-cols-1 gap-4 ${
                hosts.length === 1
                  ? 'md:grid-cols-1 max-w-xl mx-auto'
                  : 'md:grid-cols-2'
              }`}>
                {hosts.map((host: Host) => (
                  <HostCard host={host.data} />
                ))}
              </div>
            </div>
          )}
          
          {transcript_url?.trim() && (
            <div class="mt-6">
              <a href={transcript_url} class="transcript-link">
                View Transcript
              </a>
            </div>
          )}
        </div>

        <ErrorBoundary fallback="Additional episode information unavailable.">
          <StructuredData
            type="PodcastEpisode"
            data={structuredData}
            canonicalUrl={getEpisodeCanonicalUrl(language, slug)}
            availableLanguages={availableLanguages}
          />
        </ErrorBoundary>
      </>
    )}
  </article>
</ErrorBoundary>

<style>
.single-episode {
  @apply max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8 lg:py-12;
}

.episode-header {
  @apply mb-6 sm:mb-8;
}

.header-content {
  @apply mb-4 sm:mb-6;
}

.header-content h1 {
  @apply text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mb-2 sm:mb-4
         leading-tight sm:leading-snug lg:leading-normal;
}

.episode-meta {
  @apply flex flex-wrap gap-3 sm:gap-4 text-sm text-gray-600 dark:text-gray-400;
}

.duration {
  @apply flex items-center;
}

.transcript-link,
.youtube-link {
  @apply flex items-center text-accent dark:text-accent hover:opacity-90
         transition-colors duration-200;
}

.episode-content {
  @apply mt-6 sm:mt-8;
}

.description {
  @apply prose dark:prose-invert max-w-none mb-6 sm:mb-8
         text-base sm:text-lg leading-relaxed;
}

.share-section {
  @apply mt-8 sm:mt-12;
}

.share-section h2 {
  @apply text-xl sm:text-2xl font-bold mb-4 sm:mb-6 text-gray-900 dark:text-white;
}

.share-embed {
  @apply mb-4;

  :global(iframe) {
    @apply w-full rounded-lg shadow-md;
  }
}

.share-link {
  @apply inline-block px-4 py-2 bg-accent text-white rounded-lg
         hover:opacity-90 transition-colors duration-200;
}

/* Loading skeleton styles */
.loading-skeleton {
  @apply animate-pulse space-y-6 sm:space-y-8;
}

.skeleton-header {
  @apply space-y-4;
}

.skeleton-title {
  @apply h-8 sm:h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-3/4;
}

.skeleton-meta {
  @apply h-4 sm:h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/3;
}

.skeleton-image {
  @apply w-full aspect-video bg-gray-200 dark:bg-gray-700 rounded-lg;
}

.skeleton-player {
  @apply h-24 sm:h-32 bg-gray-200 dark:bg-gray-700 rounded-lg mt-6;
}

.skeleton-content {
  @apply space-y-4;
}

.skeleton-text {
  @apply h-4 bg-gray-200 dark:bg-gray-700 rounded;
}

.skeleton-text:last-child {
  @apply w-2/3;
}

/* Focus styles */
a:focus {
  @apply outline-none ring-2 ring-accent ring-offset-2 dark:ring-offset-gray-800;
}

/* Dark mode adjustments */
:global(.dark) .single-episode {
  @apply bg-gray-900;
}
</style>
