---
import ErrorBoundary from '../common/ErrorBoundary.astro';
import DOMPurify from 'isomorphic-dompurify';
import { validateProps, EpisodeCardPropsSchema } from '~/utils/component-validation';

// Helper function to strip HTML and truncate text
function sanitizeAndTruncate(html: string, maxLength: number): string {
  // First sanitize the HTML
  const sanitized = DOMPurify.sanitize(html, { ALLOWED_TAGS: [] });
  // Then truncate if needed
  if (sanitized.length <= maxLength) return sanitized;
  // Find the last space before maxLength to avoid cutting words
  const truncated = sanitized.substring(0, maxLength);
  const lastSpace = truncated.lastIndexOf(' ');
  return `${truncated.substring(0, lastSpace)}...`;
}

interface Props {
  episode: {
    id: string;
    title: string;
    description: string;
    date: string;
    audio_url: string;
    duration: number;
    language: 'en' | 'de' | 'es' | 'nl';
    guests?: Array<{
      id: string;
      name: string;
      role: string;
      bio: string;
      image_url: string;
      social_links: string[];
      language: 'en' | 'de' | 'es' | 'nl';
      type: string;
    }>;
    type?: string;
  };
  showGuests?: boolean;
}

// Validate props
const props = validateProps(EpisodeCardPropsSchema, Astro.props);
const { episode, showGuests = true } = props;
const { title, description, date, guests = [], language } = episode;
// audio_url will be used in the audio player component

// Format date based on language
const formattedDate = new Date(date).toLocaleDateString(language, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Sanitize and truncate description
const cleanDescription = sanitizeAndTruncate(description, 150);
---

<ErrorBoundary fallback="Episode information unavailable">
  <article class="episode-card">
  <a href={`/${language}/episodes/${episode.id}`} class="card-link">
    <div class="card-content">
      <h3 class="card-title">{title}</h3>
      <time datetime={date.toString()} class="card-date">
        {formattedDate}
      </time>
      <p class="card-description">{cleanDescription}</p>
      {showGuests && guests && guests.length > 0 && (
        <div class="card-guests">
          <span class="guests-label">With:</span>
          <span class="guests-names">
            {guests.map((guest, index) => (
              <>
                {index > 0 && ', '}
                <a href={`/${language}/guests/${guest.id}`} class="guest-link">
                  {guest.name}
                </a>
              </>
            ))}
          </span>
        </div>
      )}
    </div>
  </a>
  </article>
</ErrorBoundary>

<style>
.episode-card {
  @apply bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden
         transition-transform duration-300 hover:transform hover:scale-[1.02];
}

.card-link {
  @apply block h-full no-underline;
}

.card-image {
  @apply relative w-full aspect-video overflow-hidden;
}

.card-content {
  @apply p-4;
}

.card-title {
  @apply text-xl font-bold mb-2 text-gray-900 dark:text-white
         line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400;
}

.card-date {
  @apply block text-sm text-gray-500 dark:text-gray-400 mb-2;
}

.card-description {
  @apply text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-3;
}

.card-guests {
  @apply text-sm text-gray-500 dark:text-gray-400;
}

.guests-label {
  @apply font-medium mr-1;
}

.guests-names {
  @apply text-gray-700 dark:text-gray-300;

  .guest-link {
    @apply hover:text-blue-600 dark:hover:text-blue-400 hover:underline;
  }
}
</style>
