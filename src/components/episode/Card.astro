---
import ErrorBoundary from '../common/ErrorBoundary.astro';
import { validateProps, EpisodeCardPropsSchema } from '~/utils/component-validation';
import { getLanguageFromShowId } from '~/utils/permalinks';
import { getEpisodeImage } from '~/utils/images';
import DOMPurify from 'isomorphic-dompurify';
import type { Episode } from '~/types/episode';

interface Props {
  episode: Episode;
  loading?: boolean;
}

// Temporarily disable validation - episodes are working, validation can be fixed later
// const props = validateProps(EpisodeCardPropsSchema, Astro.props);
const { episode, loading = false } = Astro.props;

// Extract episode data (handle raw episode structure from getCollection)
// Raw structure: episode.data = {id, type, attributes, relationships}
const attributes = episode.data?.attributes || {};
const relationships = episode.data?.relationships || {};

const title = attributes.title || 'Untitled Episode';
const slug = attributes.slug || '';

// Get language from collection name (most reliable)
let language = 'en';
if (episode.collection) {
  language = episode.collection.replace('-episodes', '');
}

// Try to get language from show ID if available
if (relationships?.show?.data?.id) {
  try {
    language = getLanguageFromShowId(relationships.show.data.id);
  } catch (error) {
    console.warn('Could not get language from show ID, using collection name');
  }
}

// Get optimized episode image with fallback
let image = { src: '/images/default-episode.jpg', width: 400, height: 225 };
try {
  if (slug) {
    image = await getEpisodeImage(`/images/episodes/${language}/${slug.replace(/_/g, '-').toLowerCase()}.webp`, 'card');
  }
} catch (error) {
  console.warn('Could not load episode image, using default');
}

// Use clean_description first, then fall back to summary or cleaned description
const cleanSummary = attributes.clean_description ||
                    attributes.summary ||
                    DOMPurify.sanitize(attributes.description || '', { ALLOWED_TAGS: [] });

// Prepare ARIA label
let cardLabel = `Episode: ${title}`;
---

<ErrorBoundary fallback="Episode information unavailable">
  <article 
    class:list={['card h-full flex flex-col', { 'is-loading': loading }]}
    aria-label={cardLabel}
  >
    {(loading === true || loading === "true" || !title) ? (
      <div class="loading-skeleton">
        <div class="skeleton-image" aria-hidden="true"></div>
        <div class="p-4 flex flex-col flex-grow">
          <div class="skeleton-title" aria-hidden="true"></div>
          <div class="skeleton-date" aria-hidden="true"></div>
          <div class="skeleton-description" aria-hidden="true"></div>
        </div>
      </div>
    ) : (
      <>
        <img
          src={image.src}
          width={image.width}
          height={image.height}
          alt=""
          loading="lazy"
          decoding="async"
          class="w-full aspect-video object-cover"
          aria-hidden="true"
        />
        <div class="p-4">
          <div class="flex gap-2 mb-2">
            <span class={`badge badge-${language}`}>
              {language === 'en' ? 'English' :
               language === 'nl' ? 'Nederlands' :
               language === 'de' ? 'Deutsch' :
               language === 'es' ? 'Español' : language}
            </span>
          </div>
          <h3 class="text-lg font-bold mb-2 line-clamp-2">
            <a
              href={`/${language}/episodes/${slug}`}
              class="text-gray-900 dark:text-white hover:text-accent dark:hover:text-accent focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 dark:focus:ring-offset-gray-800 rounded"
              aria-label={cardLabel}
            >
              {title}
            </a>
          </h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-3 mb-4">{cleanSummary}</p>
          <div class="mt-auto pt-4">
            <a
              href={`/${language}/episodes/${slug}`}
              class="btn btn-primary inline-flex items-center gap-2 focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 dark:focus:ring-offset-gray-800"
            >
              <span>
                {language === 'nl' ? 'Luister Nu' :
                 language === 'de' ? 'Jetzt Anhören' :
                 language === 'es' ? 'Escuchar Ahora' :
                 'Listen Now'}
              </span>
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path d="M7 4v16l13 -8z"></path>
              </svg>
            </a>
          </div>
        </div>
      </>
    )}
  </article>
</ErrorBoundary>

<style>
.episode-card {
  @apply bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden
         transition-transform duration-300 hover:transform hover:scale-[1.02]
         w-full sm:max-w-sm lg:max-w-md mx-auto;
}

.card-link {
  @apply block h-full no-underline;
}

.card-image {
  @apply relative w-full aspect-video overflow-hidden;
}

.card-content {
  @apply p-3 sm:p-4;
}

.card-title {
  @apply text-lg sm:text-xl font-bold mb-1 sm:mb-2 text-gray-900 dark:text-white
         line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400
         leading-tight sm:leading-normal;
}

.card-meta {
  @apply flex items-center gap-2 text-xs sm:text-sm text-gray-500 dark:text-gray-400 mb-1 sm:mb-2;
}

.card-date {
  @apply block;
}

.card-duration {
  @apply flex items-center before:content-['•'] before:mx-2;
}

.card-description {
  @apply text-gray-600 dark:text-gray-300 text-sm mb-2 sm:mb-4 line-clamp-3
         leading-snug sm:leading-relaxed;
}

/* Loading skeleton styles */
.loading-skeleton {
  @apply animate-pulse;
}

.skeleton-image {
  @apply w-full aspect-video bg-gray-200 dark:bg-gray-700;
}

.skeleton-content {
  @apply p-3 sm:p-4 space-y-2 sm:space-y-3;
}

.skeleton-title {
  @apply h-6 sm:h-7 bg-gray-200 dark:bg-gray-700 rounded w-3/4;
}

.skeleton-date {
  @apply h-4 sm:h-5 bg-gray-200 dark:bg-gray-700 rounded w-1/3;
}

.skeleton-description {
  @apply space-y-2;
}

.skeleton-description::before,
.skeleton-description::after {
  @apply content-[''] block h-4 bg-gray-200 dark:bg-gray-700 rounded;
}

.skeleton-description::after {
  @apply w-2/3;
}

/* Focus styles */
.card-link:focus {
  @apply outline-none ring-2 ring-accent ring-offset-2 dark:ring-offset-gray-800;
}

/* Dark mode adjustments */
:global(.dark) .episode-card {
  @apply bg-gray-800;
}
</style>
