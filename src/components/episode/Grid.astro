---
import ErrorBoundary from '../common/ErrorBoundary.astro';
import EpisodeCard from './Card.astro';
import type { Episode } from '~/types/episode';

interface Props {
  episodes: Episode[];
  limit?: number;
  featured?: boolean;
  columns?: '2' | '3' | '4';
  loading?: boolean;
  showId?: string;
  season?: number;
  orderBy?: 'published_at' | 'duration';
  orderDirection?: 'asc' | 'desc';
  button?: {
    show: boolean;
    text: string;
    link: string;
  };
}

// Temporarily disable validation - episodes are working, validation can be fixed later
// const props = validateProps(EpisodeGridPropsSchema, Astro.props);
const {
  episodes,
  limit,
  featured = false,
  columns = '3',
  loading = false,
  showId,
  season,
  orderBy = 'published_at',
  orderDirection = 'desc',
  button
} = Astro.props;


// Filter and sort episodes
let filteredEpisodes = [...episodes];

// Filter by featured if specified
if (featured) {
  filteredEpisodes = filteredEpisodes.filter(episode => 
    episode.data.attributes.featured === true
  );
}

// Filter by showId if specified
if (showId) {
  filteredEpisodes = filteredEpisodes.filter(episode => 
    episode.data.relationships.show.data.id === showId
  );
}

// Filter by season if specified
if (season) {
  filteredEpisodes = filteredEpisodes.filter(episode => 
    episode.data.attributes.season === season
  );
}

// Sort episodes
filteredEpisodes.sort((a, b) => {
  let aValue: any, bValue: any;
  
  if (orderBy === 'published_at') {
    aValue = new Date(a?.data?.attributes?.published_at || 0);
    bValue = new Date(b?.data?.attributes?.published_at || 0);
  } else if (orderBy === 'duration') {
    aValue = a?.data?.attributes?.duration || 0;
    bValue = b?.data?.attributes?.duration || 0;
  }
  
  if (orderDirection === 'asc') {
    return aValue > bValue ? 1 : -1;
  } else {
    return aValue < bValue ? 1 : -1;
  }
});

// Apply limit if specified
if (limit) {
  filteredEpisodes = filteredEpisodes.slice(0, limit);
}

// Determine grid classes based on columns
const gridClasses: Record<string, string> = {
  '2': 'grid gap-8 sm:grid-cols-1 md:grid-cols-2',
  '3': 'grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
  '4': 'grid gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
};
---

<ErrorBoundary fallback="Unable to load episodes.">
  <div class="container mx-auto">
    {filteredEpisodes.length > 0 ? (
    <div class={gridClasses[columns!]}>
      {filteredEpisodes.map((episodeItem: Episode, index: number) => (
      <EpisodeCard episode={episodeItem} loading={loading} />
      ))}
    </div>
    ) : (
    <div class="text-center py-8">
      <p class="text-gray-600 dark:text-gray-400">No episodes available</p>
    </div>
    )} {button && button.show && (
    <div class="text-center mt-8">
      <a
        href={button.link}
        class="btn btn-primary inline-flex items-center gap-2 focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2 dark:focus:ring-offset-gray-800"
      >
        {button.text}
      </a>
    </div>
    )}
  </div>
</ErrorBoundary>

<style>
  /* Grid responsive adjustments */
  .grid {
    @apply w-full;
  }

  /* Ensure cards have consistent height in grid */
  .grid > * {
    @apply h-full;
  }

  /* Loading state for grid */
  .grid.is-loading {
    @apply animate-pulse;
  }

  /* Dark mode adjustments */
  :global(.dark) .container {
    @apply text-white;
  }
</style>
