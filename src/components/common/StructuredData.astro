---
import { StructuredDataGenerator, generateHreflangTags } from '~/utils/structured-data';
import type { Episode, Person, Quote, Platform, Brand } from '~/types';

interface Props {
  type: 'episode' | 'person' | 'quote' | 'platform' | 'brand';
  data: Episode | Person | Quote | Platform | Brand;
  canonicalUrl?: string;
  availableLanguages: string[];
}

const { type, data, canonicalUrl, availableLanguages } = Astro.props;

let schema: Record<string, unknown>;
let hreflangTags: string[] = [];

switch (type) {
  case 'episode':
    schema = StructuredDataGenerator.generateEpisodeSchema(
      data as Episode, 
      { canonicalUrl }
    );
    hreflangTags = generateHreflangTags(data as { id: string; language: string }, availableLanguages);
    break;
  case 'person':
    schema = StructuredDataGenerator.generatePersonSchema(
      data as Person
    );
    hreflangTags = generateHreflangTags(data as { id: string; language: string }, availableLanguages);
    break;
  case 'quote':
    schema = StructuredDataGenerator.generateQuoteSchema(
      data as Quote
    );
    hreflangTags = generateHreflangTags(data as { id: string; language: string }, availableLanguages);
    break;
  case 'platform':
    schema = StructuredDataGenerator.generatePlatformSchema(
      data as Platform
    );
    hreflangTags = generateHreflangTags(data as { id: string; language: string }, availableLanguages);
    break;
  case 'brand':
    schema = StructuredDataGenerator.generateBrandSchema(
      data as Brand
    );
    hreflangTags = generateHreflangTags(data as { id: string; language: string }, availableLanguages);
    break;
  default:
    throw new Error(`Unsupported structured data type: ${type}`);
}

const renderedSchema = StructuredDataGenerator.renderSchema(schema);
---

<Fragment set:html="{renderedSchema}" />

{hreflangTags.map((tag) => <Fragment set:html="{tag}" />)}
