---
import type { SchemaOrgObject } from '~/types';

interface Props {
  type: string;
  data: SchemaOrgObject;
  canonicalUrl: string;
  availableLanguages: string[];
}

const { type, data, canonicalUrl, availableLanguages } = Astro.props;

// Base structured data that's common across all types
const baseStructuredData = {
  '@context': 'https://schema.org',
  '@type': type,
  url: canonicalUrl,
};

// Add language alternates if available
if (availableLanguages.length > 0) {
  baseStructuredData['inLanguage'] = Astro.url.pathname.split('/')[1] || 'en';
  baseStructuredData['alternateLanguage'] = availableLanguages.map((lang) => ({
    '@type': 'Language',
    inLanguage: lang,
    url: `${canonicalUrl.replace(/\/$/, '')}/${lang}`,
  }));
}

// Merge base data with provided data
/* eslint-disable-next-line @typescript-eslint/no-unused-vars */
const structuredData = {
  ...baseStructuredData,
  ...data,
};

---

<script type="application/ld+json" is:inline>
  {JSON.stringify(structuredData, null, 2)}
</script>
