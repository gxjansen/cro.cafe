---
import type { MetadataProps } from '~/types';

interface Props extends MetadataProps {
  ogImageType?: 'episode' | 'guest' | 'quote';
  ogSubtitle?: string;
  episode?: {
    local_image_url?: string;
  };
}

const {
  title,
  description,
  image,
  canonicalUrl,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  tags = [],
  ogImageType,
  ogSubtitle,
  episode
} = Astro.props;

const fullImageUrl = image ? new URL(image, Astro.site).toString() : undefined;
const ogImageUrl = ogImageType
  ? new URL(`/og/${ogImageType}/${encodeURIComponent(title)}.png`, Astro.site).toString()
  : fullImageUrl;
---

{/* Basic Metadata */}
<title>{title}</title>
<meta name="description" content={description} />

{/* OpenGraph Metadata */}
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalUrl || Astro.url.href} />
{fullImageUrl && <meta property="og:image" content={episode?.local_image_url || fullImageUrl} />}

{/* Twitter Card Metadata */}
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
{fullImageUrl && <meta name="twitter:image" content={fullImageUrl} />}

{/* Article-specific Metadata */}
{type === 'article' && (
  <>
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    {author && <meta property="article:author" content={author} />}
    {tags.map((tag: string) => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

{/* Canonical URL */}
{canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
