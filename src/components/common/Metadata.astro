---
import { SITE } from '~/config';
import type { MetaData } from '~/types';
import type { Language } from '~/types';
import type { SchemaOrgObject } from '~/types';

interface Props {
  metadata: MetaData;
  availableLanguages: readonly Language[];
  canonicalUrl: string;
  currentLang: Language;
  episode?: any; // Placeholder for now, will refine later
}

const { metadata, availableLanguages, canonicalUrl, currentLang, episode } = Astro.props;

const fullImageUrl = metadata.image ? new URL(metadata.image, Astro.site).toString() : undefined;

const ogImageUrl = metadata.ogImageType
  ? new URL(`/images/${metadata.ogImageType}.webp`, Astro.site).toString()
  : fullImageUrl;

const structuredData: SchemaOrgObject = {
  '@context': 'https://schema.org',
  '@type': metadata.type || 'website',
  url: canonicalUrl,
  name: metadata.title,
  description: metadata.description,
  image: ogImageUrl,
  datePublished: metadata.publishedTime,
  dateModified: metadata.modifiedTime,
  author: metadata.author,
  tags: metadata.tags,
};

if (episode) {
  structuredData['@type'] = 'Article';
  structuredData['headline'] = episode.title;
  structuredData['datePublished'] = episode.published_at;
  structuredData['dateModified'] = episode.modified_at;
  structuredData['author'] = {
    '@type': 'Person',
    name: episode.guests.map((guest: any) => guest.name).join(', '), // Ensure guest is typed
  };
  structuredData['publisher'] = {
    '@type': 'Organization',
    name: SITE.title,
    url: SITE.url,
    logo: {
      '@type': 'ImageObject',
      url: new URL(SITE.logo, Astro.site).toString(),
    },
  };
  structuredData['mainEntityOfPage'] = {
    '@type': 'WebPage',
    '@id': canonicalUrl,
  };
}

if (availableLanguages.length > 0) {
  structuredData['inLanguage'] = currentLang;
  structuredData['alternateLanguage'] = availableLanguages.map((lang: Language) => ({
    '@type': 'WebPage',
    inLanguage: lang,
    url: `${canonicalUrl.replace(/\/$/, '')}/${lang}`,
  }));
}

---
<script type="application/ld+json" is:inline>
  {JSON.stringify(structuredData, null, 2)}
</script>
